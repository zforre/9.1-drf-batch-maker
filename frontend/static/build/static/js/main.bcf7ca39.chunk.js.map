{"version":3,"sources":["components/RecipesList.js","components/RecipeForm.js","containers/App.js","serviceWorker.js","index.js"],"names":["axios","defaults","xsrfCookieName","xsrfHeaderName","RecipesList","props","state","recipes","title","description","image","preview","is_public","recipe_type","prep_time","cook_time","cook_temp","directions","get","then","result","setState","data","catch","error","console","log","this","map","recipe","className","key","id","src","alt","Component","RecipeForm","handleChange","bind","handleSubmit","handleImageChange","event","target","value","type","checked","name","file","files","reader","FileReader","onloadend","readAsDataURL","preventDefault","formData","FormData","append","post","headers","res","push","Fragment","onSubmit","onChange","Form","Check","label","App","showComponent","addRecipe","response","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.bcf7ca39.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport axios from 'axios';\n\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\n\nclass RecipesList extends Component {\n    constructor(props) {\n        super(props);\n            this.state = {\n                recipes: [],\n                title: '',\n                description: '',\n                image: null,\n                preview: null,\n                is_public: true,\n                recipe_type: \"\",\n                prep_time: \"\",\n                cook_time: \"\",\n                cook_temp: 1,\n                directions: \"\",\n            }\n    }\n\n    componentDidMount() {\n        axios.get(\"/api/v1/\")\n        .then(result => {\n            this.setState({recipes: result.data})\n        })\n        .catch(error => {\n            console.log(error);\n        })\n    }\n\n    render() {\n        return(\n            <div>\n                <h1>I am the List App</h1>\n                <ul>\n                    {this.props.recipes.map(recipe => \n                    <li className=\"card mt-5\" key={recipe.id}> \n                        <img src={recipe.image} className=\"card-img-top\" alt=\"Uploaded Photo\"></img>\n                        <div className=\"card-body\">\n                            <h2 className=\"card-title\">{recipe.title}</h2> \n                            <p className=\"card-text\">{recipe.description}</p>\n                        </div>\n                    </li>)}\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default RecipesList","import React, {Component} from 'react';\nimport axios from 'axios';\nimport Form from 'react-bootstrap/Form'\n\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\n\nclass RecipeForm extends Component {\n    constructor(props) {\n        super(props);\n            this.state = {\n                recipes: [],\n                title: '',\n                description: '',\n                image: null,\n                preview: null,\n                is_public: true,\n                recipe_type: \"\",\n                prep_time: \"\",\n                cook_time: \"\",\n                cook_temp: 1,\n                directions: \"\",\n            }\n\n            this.handleChange = this.handleChange.bind(this);\n            this.handleSubmit = this.handleSubmit.bind(this);\n            this.handleImageChange = this.handleImageChange.bind(this);\n    }\n\n    handleChange(event) {\n        const target = event.target;\n        const value = target.type === \"checkbox\" ? target.checked : target.value;\n        const name = target.name;\n        this.setState({[name]: value})\n    }\n\n    handleImageChange(event){\n        let file = event.target.files[0]\n        this.setState({image: file});\n        let reader = new FileReader();\n        reader.onloadend = () => {\n        this.setState({preview: reader.result});\n        };\n\n        reader.readAsDataURL(file);\n\n    }\n\n    componentDidMount() {\n        axios.get(\"/api/v1/\")\n        .then(result => {\n            this.setState({recipes: result.data})\n        })\n        .catch(error => {\n            console.log(error);\n        })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        let formData = new FormData();\n        formData.append(\"title\", this.state.title);\n        formData.append(\"image\", this.state.image);\n\n        axios.post(\"/api/v1/recipes/\", formData, {\n            headers: {\n                \"content-type\": \"multipart/form-data\"\n            }\n        })\n        .then(res => {\n            let recipes = [...this.state.recipes];\n            recipes.push(res.data);\n\n            this.setState({recipes: recipes, title: \"\", preview: null, image: null,});\n        })\n        .catch(error => {\n            console.log(error)\n        });\n\n    }\n\n    render() {\n        let recipes = this.state.recipes.map(recipe => (\n            <li key={recipe.id}>\n                <p>{recipe.title}</p>\n                <img src={recipe.image} alt=\"\"/>\n            </li>\n        ))\n        return(\n            <React.Fragment>\n                <form className=\"\" onSubmit={this.handleSubmit}>\n                    <div className=\"form-group col-3\">\n                        <label> Title</label>\n                            <input type=\"text\" name=\"title\" className=\"form-control\" value={this.state.title} onChange={this.handleChange}/>\n                            <small className=\"form-text text-muted\">This is the name of your recipe, make it special!</small>\n                    </div>\n\n                    <label> Image:\n                        <input type=\"file\" name=\"image\" onChange={this.handleImageChange}/>\n                    </label>\n\n                   <Form.Check type=\"checkbox\" name=\"is_public\" className=\"form-check-label\" checked={this.state.is_public} onChange={this.handleChange} label=\"public\" />\n\n                   <div className=\"form-group col-6\">\n                        <label>Prep Time\n                            <input type=\"text\" name=\"prep_time\" className=\"form-control\" value={this.state.prep_time} onChange={this.handleChange}/>\n                        </label>\n                    </div>\n\n                    <div className=\"form-group col-6\">\n                        <label>Cook Time\n                            <input type=\"text\" name=\"cook_time\" className=\"form-control\" value={this.state.cook_time} onChange={this.handleChange}/>\n                        </label>\n                    </div>\n\n                    <div className=\"form-group col-6\">\n                        <label>Cook Temp\n                            <input type=\"number\" name=\"cook_temp\" className=\"form-control\" value={this.state.cook_temp} onChange={this.handleChange}/>\n                        </label>\n                    </div>\n\n                    <div className=\"form-group col-6\">\n                        <label>Directions\n                            <input type=\"text\" name=\"directions\" className=\"form-control\" value={this.state.directions} onChange={this.handleChange}/>\n                        </label>\n                    </div>\n\n\n                    {this.state.image ? (\n                        <img src={this.state.preview} alt=\"preview\"/>\n                    ) : (\n                        null\n                    )}\n\n                    <button className=\"btn btn-primary\">Add Recipe</button>\n                </form>\n                <ul>{recipes}</ul>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default RecipeForm","import React,{Component} from 'react';\nimport RecipesList from '../components/RecipesList.js'\nimport RecipeForm from '../components/RecipeForm.js'\nimport './App.css';\n\nimport axios from 'axios';\n\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\n\nclass App extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      recipes: [],\n      showComponent: 'home'\n    }\n    this.addRecipe = this.addRecipe.bind(this);\n  }\n\n  componentDidMount() {\n    axios.get(`api/v1/`)\n      .then(response => this.setState({recipes: response.data}))\n      .catch(error => console.log(error));\n  }\n\n  addRecipe(recipe) {\n    let recipes = [...this.state.recipes];\n    recipes.push(recipe)\n  }\n\n  render() {\n    console.log(this.state.recipes)\n    return(\n      <div>\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n          <a className=\"navbar-brand\" href=\"#\">Batch Maker</a>\n          <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n            <ul className=\"navbar-nav\">\n              <li className=\"nav-item active\">\n                <a className=\"nav-link\" href=\"#\">Home <span className=\"sr-only\">(current)</span></a>\n              </li>\n              <li className=\"nav-item\">\n                <button className=\"btn nav-link\" href=\"#\" onClick={() => this.setState({showComponent: 'recipes'})}>Recipes</button>\n              </li>\n              <li className=\"nav-item\">\n                <a className=\"nav-link\" href=\"#\" onClick={() => this.setState({showComponent: 'create a recipe'})}>Create a Recipe</a>\n              </li>\n              <li className=\"nav-item\">\n                <a className=\"nav-link disabled\" href=\"#\">Sign Up</a>\n              </li>\n              </ul>\n          </div>\n        </nav>\n        <h1>This is the Home Page</h1>\n\n\n\n    { this.state.showComponent === 'recipes' && <RecipesList recipes = {this.state.recipes}/> }\n\n    { this.state.showComponent === 'create a recipe' && <RecipeForm recipes ={this.state.recipes}/> }\n       \n      </div>\n      \n\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}